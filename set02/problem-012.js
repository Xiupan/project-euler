// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

let generateNextTriangleNum = (numOfDigits) => {
  let arrayOfNum = []
  let sum = 0

  for (let a = 1; a <= numOfDigits; a++) {
    arrayOfNum.push(a)
  }

  for (let b = 0; b < arrayOfNum.length; b++) {
    sum += arrayOfNum[b]
  }
  return sum
}

let getDivisorsCnt = (n) => {
  let numDivisors = 1;
  let factor = 2; // Candidate for prime factor of `n`

  // If `n` is not a prime number then it must have one factor
  // which is <= `sqrt(n)`, so we try these first:
  while (factor * factor <= n) {
      if (n % factor === 0) {
          // `factor` is a prime factor of `n`, determine the exponent:
          let exponent = 0;
          do {
              n /= factor;
              exponent++;
          } while (n % factor === 0)
          // `factor^exponent` is one term in the prime factorization of n,
          // this contributes as factor `exponent + 1`:
          numDivisors *= exponent + 1;
      }
      // Next possible prime factor:
      factor = factor == 2 ? 3 : factor + 2
  }
  // Now `n` is either 1 or a prime number. In the latter case,
  // it contributes a factor 2:
  if (n > 1) {
      numDivisors *= 2;
  }
  return numDivisors;
}

// let triangleNum = generateNextTriangleNum(7)
// console.log(generateNextTriangleNum(7));
// console.log(getDivisorsCnt(triangleNum));

let triangleNum = 0

for (let c = 1; c < 100001; c++) {
  triangleNum = generateNextTriangleNum(c)
  if (getDivisorsCnt(triangleNum) > 500) {
    console.log(triangleNum);
    break
  }
}
//
